name: Publish package

on:
  push:
    tags:
      - v**

jobs:
  build:
    name: Build python package
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v8
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"
      - name: Install dependencies
        run: poetry install --only main
      - name: Build package
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  pypi-publish:
    name: Upload release to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/gnukek-cli/
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Create GitHub release
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Determine if pre-release
        id: prerelease
        run: |
          # Match pre-release identifiers in Python versioning: a, b, rc
          if [[ "$GITHUB_REF_NAME" =~ ^v[0-9]+(\.[0-9]+)*[a-z]+[0-9]+$ ]]; then
            echo "is_prerelease=true" >> $GITHUB_ENV
          else
            echo "is_prerelease=false" >> $GITHUB_ENV
          fi
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if [ "$is_prerelease" == "true" ]; then
            gh release create "$GITHUB_REF_NAME" --repo "$GITHUB_REPOSITORY" --notes "" --prerelease
          else
            gh release create "$GITHUB_REF_NAME" --repo "$GITHUB_REPOSITORY" --notes ""
          fi
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
